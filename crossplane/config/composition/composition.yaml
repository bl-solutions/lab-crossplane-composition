apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: app
spec:
  compositeTypeRef:
    apiVersion: contoso.org/v1alpha1
    kind: xApp
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: deployment
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: apps/v1
                    kind: Deployment
                    spec:
                      template:
                        spec:
                          automountServiceAccountToken: false
                          containers:
                            - imagePullPolicy: IfNotPresent
                              ports:
                                - containerPort: 80
                                  protocol: TCP
                              resources:
                                requests:
                                  memory: 10Mi
                                  cpu: 10m
                                  ephemeral-storage: 10Mi
                                limits:
                                  memory: 20Mi
                                  cpu: 20m
                                  ephemeral-storage: 10Mi
                          restartPolicy: Always
                providerConfigRef:
                  name: kubernetes-provider
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.metadata.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.metadata.labels["app"]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.replicas
                toFieldPath: spec.forProvider.manifest.spec.replicas
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels["app"]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels["app"]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.image
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].image
          - name: service
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: Service
                    spec:
                      ports:
                        - port: 80
                          protocol: TCP
                      type: ClusterIP
                providerConfigRef:
                  name: kubernetes-provider
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.metadata.name
                transforms:
                  - type: string
                    string:
                      type: Format
                      fmt: "%s-svc"
              - type: FromCompositeFieldPath
                fromFieldPath: spec.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.metadata.labels["app"]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.spec.selector["app"]
